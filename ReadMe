describe('Homepage', function () { });
it('should load properly', function () { })
$('=the text to search by') using link text as a selector
if (browser.getUrl() !== 'https://demo.learnwebdriverio.com/login') {
throw new Error('URL of "login" page should be correct')
}

<ul class="items" dropdown-menu id="main-menu">
<li class="item">
<a ng-click="showProjects()">
Projects
<span class="icon"></span>
</a>
</li>
<li class="item">
<a ng-click="showArchive()">
Archive
<span class="icon"></span>
</a>


If we use $$('li'), we’ll get an array with two elements in it. We can use JavaScript array syntax
to select the second one: $$('li')[1]

Link text selectors and partial link text selectors are also pretty simple. To get the first link, we could
do $('=Projects'). To get the second li using a partial link text selector, we can do $('*=chive').

To use a CSS selector in WebdriverIO, just pass it into the $ or $$
function. Here’s one that grabs the ul by class name: $('ul.items'), and one that grabs the two
li’s by class as well: $$('li.item').

Using CSS Attribute Selectors, we can target the ng-click attribute of the link,
like so:
$("[ng-click='showProjects()']");
$("[dropdown-menu] a[ng-click='showProjects()']");

The first-child selector allows us to do this:
$("li:first-child"); too broad we can narrow it down with this:
$("[dropdown-menu] li:first-child");

What if we wanted to get the second child? We can use The nth-child selector:
$("[dropdown-menu] li:nth-child(2)"); nth-child takes a numeric value,
which corresponds to the position in the HTML (it is not zeroindexed, so counting starts at 1).

Chaining Selectors
$('=Projects').$('span')
$('ul').$$('li') or $$('ul li')

When it comes to selecting elements, I like to follow this general guidelines:
• If I can change the HTML, add a custom data attribute for testing purposes only (this way they
don’t inadvertently get changed)
• If I don’t have control of the HTML, come up with selectors that are specific, but not overly
tied to the HTML structure. For example, using simple parent-child relationships, :nth-child
selectors or text based ones. It’s not perfect, but it gets the job done

Example of creating a custom command
************************************
browser.waitUntil(function () {

const signInExists = auth.$signIn.isExisting();

const errorExists = auth.$errorMessages.isExisting();

return !signInExists || errorExists;
});

Examples of requirements
************************
– Can access from the login page
– Requires username, email, password - it('should require username, email and password for registration')
– Checks that password isn’t too short (minimum is 8 characters) -it('should not accept short password')
– username has already been taken - it('should reject already used username')
– email has already been taken - it('should reject already used email')
– Takes you to home page once you register - it('should go to home page once registered')

it('should load page properly', function () {
expect(browser.getUrl()).to.include('editor');
expect(editor.$title.isExisting(), 'Title').to.be.true;
expect(editor.$description.isExisting(), 'Description').to.be.true;
expect(editor.$body.isExisting(), 'Body').to.be.true;
expect(editor.$tags.isExisting(), 'Tags').to.be.true;
expect(editor.$publish.isExisting(), 'Publish').to.be.true;
})

Base class Example
******************

const { URL } = require('url');
class Generic {
constructor (path) {
this.path = path;
// store the url by combining specific page path with WDIO base url
// using the NodeJS URL utility
this.url = new URL(path, browser.options.baseUrl);
}
load() {
browser.url(this.path);
}
}
module.exports = Generic;

PageObject Example -Login Page
******************************
const Generic = require('./Generic.page');
class Auth extends Generic {
constructor () {
super('./login')
}
get $email () { return $('input[type="email"]'); }
get $password () { return $('input[type="password"]'); }
get $signIn () { return $('button*=Sign in'); }
get $errorMessages () { return $('.error-messages li'); }
login ({ email, password }) {
this.$email.setValue(email);
this.$password.setValue(password);
this.$signIn.click();
// wait until either the sign in button is gone or an error has appeared
browser.waitUntil(() => {
2.5 Sharing Common Page Object Functionality 165
const signInExists = this.$signIn.isExisting();
const errorExists = this.$errorMessages.isExisting();
return !signInExists || errorExists;
}, null, 'The sign in button is not gone and an error never appeared');
}
}
module.exports = new Auth();

Another Example of Page Object 
******************************

const Generic = require('./Generic.page');
class Editor extends Generic {
constructor () {
super('./editor')
}
get $title () { return $('[data-qa-id="editor-title"]'); }
get $description () { return $('[data-qa-id="editor-description"]'); }
get $body () { return $('[data-qa-id="editor-body"]'); }
get $tags () { return $('[data-qa-id="editor-tags"]'); }
get $publish () { return $('[data-qa-id="editor-publish"]'); }
}
module.exports = new Editor();